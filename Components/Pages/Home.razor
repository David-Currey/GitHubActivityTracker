@page "/"
@rendermode InteractiveServer
@using GitHubActivityTracker.Services
@using GitHubActivityTracker.Models
@inject GitHubService GitHubService
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>

<div class="card container-card">
    <h3 class="title">GitHub Activity Tracker</h3>
    <div class="search-bar">
        <input @bind="Username" class="search-input" placeholder="Enter GitHub username" />
        <button class="btn btn-primary" @onclick="LoadEvents">Load Activity</button>
    </div>
    @if (ShowMessage)
    {
        <div class="info-message">
            <p>Showing the 30 most recent public GitHub events (limit set by GitHub API):</p>
        </div>
    }

    <canvas id="eventChart" width="700" height="350"></canvas>
</div>

<div class="card commit-card">
    @if (Events is not null)
    {
        <ul class="list-group list-group-flush">
            @foreach (var e in Events)
            {
                <li class="list-group-item">
                    <strong>@e.Type</strong> on <em>@e.Repo.Name</em> at @e.CreatedAt.ToLocalTime()
                </li>
            }
        </ul>
    }
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="chartInterop.js"></script>

@code {
    private string Username = "torvalds";
    private List<GitHubEvent>? Events;
    private bool ShowMessage = false;

    private async Task LoadEvents()
    {
        ShowMessage = true;

        Console.WriteLine($"Fetching activity for {Username}");
        Events = await GitHubService.GetRecentEventsAsync(Username);
        Console.WriteLine($"Got {Events?.Count} events");

        var hourlyCounts = Events
        .Where(e => e.Type == "PushEvent")
        .GroupBy(e => e.CreatedAt.Hour)
        .OrderBy(g => g.Key)
        .ToDictionary(g => g.Key, g => g.Count());

        var labels = hourlyCounts.Keys.Select(h => h.ToString("D2")).ToArray();
        var counts = hourlyCounts.Values.ToArray();

        await JS.InvokeVoidAsync("renderEventChart", "eventChart", labels, counts);
    }
}