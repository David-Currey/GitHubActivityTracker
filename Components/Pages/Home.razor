@page "/"
@rendermode InteractiveServer
@using GitHubActivityTracker.Services
@using GitHubActivityTracker.Models
@inject GitHubService GitHubService
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>

<h3>GitHub Activity Tracker</h3>

<div class="centered-content">
    <div id="user-input">
        <input @bind="Username" placeholder="Enter GitHub username" class="form-control mb-2 w-50" />
        <button class="btn btn-primary" @onclick="LoadEvents">Load Activity</button>
    </div>

    <canvas id="eventChart" width="800" height="400"></canvas>
</div>

@if (Events is not null)
{
    <ul class="mt-3">
        @foreach (var e in Events)
        {
            <li>
                <strong>@e.Type</strong> on <em>@e.Repo.Name</em> at @e.CreatedAt.ToLocalTime()
            </li>
        }
    </ul>
}

@code {
    private string Username = "torvalds";
    private List<GitHubEvent>? Events;

    private async Task LoadEvents()
    {
        Console.WriteLine($"Fetching activity for {Username}");
        Events = await GitHubService.GetRecentEventsAsync(Username);
        Console.WriteLine($"Got {Events?.Count} events");

        var hourlyCounts = Events
        .Where(e => e.Type == "PushEvent")
        .GroupBy(e => e.CreatedAt.Hour)
        .OrderBy(g => g.Key)
        .ToDictionary(g => g.Key, g => g.Count());

        // Build chart labels (hour of day) and values
        var labels = hourlyCounts.Keys.Select(h => h.ToString("D2")).ToArray(); // "00", "01", ..., "23"
        var counts = hourlyCounts.Values.ToArray();

        await JS.InvokeVoidAsync("renderEventChart", "eventChart", labels, counts);
    }

}
